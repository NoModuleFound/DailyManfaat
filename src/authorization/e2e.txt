from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import os
import base64

def generate_key(secret_passphrase: str, salt: bytes):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=16,  # 128-bit key
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(secret_passphrase.encode())


def encrypt(plain_text: str, secret_key: bytes):
    iv = os.urandom(16)  # Generate a random IV (Initialization Vector)
    cipher = Cipher(algorithms.AES(secret_key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # PKCS7 Padding (AES requires block size to be 16 bytes)
    pad_length = 16 - (len(plain_text) % 16)
    padded_text = plain_text + chr(pad_length) * pad_length

    encrypted_bytes = encryptor.update(padded_text.encode()) + encryptor.finalize()
    return base64.b64encode(iv + encrypted_bytes).decode()  # Encode IV + encrypted data in Base64

# Decrypt data using AES-128-CBC
def decrypt(encrypted_text: str, secret_key: bytes):
    encrypted_data = base64.b64decode(encrypted_text)
    iv = encrypted_data[:16]  # Extract IV from the beginning
    encrypted_bytes = encrypted_data[16:]

    cipher = Cipher(algorithms.AES(secret_key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    decrypted_padded_text = decryptor.update(encrypted_bytes) + decryptor.finalize()
    pad_length = decrypted_padded_text[-1]  # Get padding length
    return decrypted_padded_text[:-pad_length].decode()

# Example Usage
if __name__ == "__main__":
    passphrase = "my_secret_passphrase"
    salt = os.urandom(16)  # Store this salt securely!

    # Generate AES-128 Key
    secret_key = generate_key(passphrase, salt)
    
    # Encrypt
    original_text = "Hello, this is E2E encryption!"
    encrypted_text = encrypt(original_text, secret_key)
    print(f"üîê Encrypted: {encrypted_text}")

    # Decrypt
    decrypted_text = decrypt(encrypted_text, secret_key)
    print(f"üîì Decrypted: {decrypted_text}")
